 챕터-1 리액트 컴포넌트 생성 및 DOM에 렌더링
  - JSX 개념 잡음. jsx => vanilla js => class(React Element) 리턴
  - 클래스 를 인스턴스화 한 후 타켓 DOM 에 렌더링  컴포넌트 구조

  *컴포넌트 구조화
   앱은 컴포넌트들의 모음이다.
    앱 구조
    - index.js
        - search_bar.js
        - video_detail.js
        - video_item.js
        - video_list.js

    *규칙!
       - 파일 1개당 한개의 컴포넌트!

    *컴포넌트
       - 함수 기반 컴포넌트: simple just return jsx and without state
       - 클래스 기반 컴포넌트: return jsx and other do!  (추가 기능)
         ex) event handle, 컴포넌트 상호작용, 상태


    *클래스 컴포넌트 이벤트 핸들링
      - 인라인 방식
        <input onChange={(e) => e.target.value} />
      - 핸들러 방식
        <input onChange={this.onInputChange} />
        => 메서드 이름 짓기 : [on OR handle] + [element 명] + [event type]

    *상태(state)
        state is plain js Object
        each class component has a individual state object
        즉 컴포넌트의 스테이트는 지역적인 스테이트 이다.
        각 컴포넌트 마다 개별적으로 스테이트를 가지고 있음. 나중에 전역 스테이트로 "리덕스"를 쓸 예정이다.
        스테이트 객체는 클래스의 생성자에서 초기화 함
        state 객체의 값이 변경하면 render() 메서드가 호출되여 리렌더링 된다. => DOM 에 푸시한다.
        state 객체는 상태는 setState() 메서드로 변경해야 한다. (생성자 제외)

        <컴포넌트 이벤트 핸들링>
         클래스 컴포넌트일 경우 자신의 스테이트를 가지고 있고 스테이트에 값등을 저장한다.
            <input
                value={this.state.term}
                onChange={(event) => this.setState({term: event.target.value})} />

         중요 포인트는 이벤트가 발생하고 입력 값을 인풋이 아니라 컴포넌트 스테이트 상태로 저장시킨다.
         인풋의 값을 보여줄때도 인풋의 자체 값이 아니라 스테이트 저장된 상태 값을 인풋으로 내려 보낸다.


    *컴포넌트 렌더링 방식: render()
        부모 컴포넌트 리렌더링 => 그 부모의 자식 컴포넌트도 리렌더링 => 자식의 자식 컴포넌트도 리랜더링...



    챕터-2 : 유투브 검색 구현하기
    질문: 어디서 api 통신을 하여 데이터를 가져오고 어떤 컴포넌들이 이 데이터를 사용하는가?
     리액트는 "하향 데이터 플로우" 방식으로 "상위 컴포넌트"가 데이터를 가져올 권리를 가져야 한다.
     상위 컴포넌트에서 하위 컴포넌트들 에게 데이터를 전달한다.  상위 ==> 하위
     데이터는 배열, 이거나 객체, 그리고 중요한 '함수'를 전달한다.
     함수는 대부분 부모 컴포넌트의 스테이트의 상태를 변형 하는 함수 이다. ex) (selectedVideo) => this.setState({selectedVideo})
     *이렇게 하는 이유
        1. 이벤트가 하위 컴포넌트에서 발생 하지만 리액트는 하향 테이터 플로우 이므로 하위에서 상위 컴포넌트로 요청 하지 않는다.
           대신 상위 컴포넌트의 스테이를 변경할 수 있는 (콜백)함수를 전달 한다.
           하위 컴포넌트에서 이벤트 발생시 상위 컴포넌트에서 준 (콜백)함수를 이벤트 핸들러로 쓴다.

        2. 상위 컴포넌트의 스테이트가 변경되면 render() 메서드가 리렌더링 되므로 화면이 새로 고침 된다.

        3. 리액트는 데이터 기반으로 화면이 새로고침 되는 특징을 가지고 있다.


    *CSS 스타일링
     1. src/style/style.css 에 스타일을 정의 한다.
     2. 컴포넌트 이름과 css 클래스 이름을 맞춘다. (팁)
     x) SearchBar 컴포넌트의 class 는 .search-bar 로 한다.


    &검색 주기 제어 (lodash debounce 함수!!!! 였군)
       - 솔루션에서는 검색 주기 제어를 SearchBar 컴포넌트에서 하지 않고 상위 index.js 에서 한다..
       - 음.. SearchBar컴포넌트에서 해야 한다고 생각함


3. 리덕스
    리덕스 란?
        공식정의 => "예측 가능한 자바스크립트 스테이트 컨테이너" 라고 함..
        어플리케이션 레벨의 글로벌 스테이트 (== 상태 저장소)

    리액트 : views contained in the application
        어플리케이션에서 view 컨테이너 담당.
        UI/UX 제공 및 유저와 상호작용 및 이벤트 처리

    리덕스 : Data contained in the application
       어플리케이션에서 Data 컨테이너 담당
       어플리케이션의 모든 데이터를 집중하여 한곳 에서 관리 => 1개의 객체로 관리
       글로버 오브젝트 로 어플리케이션 모든 데이터 관리


   틴더 앱 모델
     <데이터 컨테이너: 리덕스 part>
     1. 모든 유저 목록 (이미지와 채팅로그)
     2. 앞으로 리뷰할 유저 목록
     3. 현재 보여지고 있는 유저
     4. 열린 대화 목록
     5. 현재 대화창

    <뷰 컨테이너 : 리액트 part>
    1. 이미지 카드
    2. 좋아요/싫어요 버튼
    3. 열려있는 대화 목록
    4. 텍스트 아이템 (개인 메시지)
    5. 텍스트 리스트 (채팅 메시지 목록)
    ...


    리덕스 용어정리
    - 리듀서: 어플리케이션 레벨의 리듀서 스테이트를 변경/조회/수정 하는 함수로 리덕스 스테이트를 생성할 권한이 있다.
            스토어 상태와 1:1로 페어링
            리덕스 스테이트: {'key': 리듀서 함수 }

    루트 리듀서
      리듀서 들의 최상위 리듀서로 리듀서들의 모음

    *리액트에 리덕스 연결:  react-redux.js 디펜던시
      두 라이브러리를 연결하려면 필요함.

    *리액트 <컴포넌트>와 리덕스 <컨테이너> 역할
      디렉터리 구조 분리 , src/components , src/containers

      "컨테이너"는 그냥 리액트 컴포넌트로 리덕스에 의해 관리되는 스테이트에 직접적인 연결이 가능한 "역할"을 하는 컴포넌트 이다.
      리액트 컴포넌트에 리덕스 스테이트를 주입 시킨 컴포넌트를 컨테이너라고 한다.

      Q. 리액트의 어떤 컴포넌트가 컨테이너(리덕스의 스테이트에 직접 접근 가능한) 역할을 갖는가?
      => 일반적으로 가장 상위의 컴포넌트가 부분적인 스테이트로 컨테이너 역할을 한다.

      최상위 App 컴포넌트(components/app.js)는 DOM 컴포넌트 또는 일반덕인 리액트 컴포넌트 여야 한다.
      App 컴포넌트가 전체 컴포넌트들을 관리하고
      리덕스 스테이트와 연결된 컨테이너들이 상태를 전담한다. (관심사 분리)
      최상위 app 컴포넌트는 리덕스 스테이트 접근 금지!

    *중요한 점
    스테이트가 변하면, 컨테이너는 즉시 리렌더링 되어 화면이 새로고침 된다.
    어플리케이션은 스테이트가 바뀔 때 마다, 컴포넌트와 컨테이너는 자동적으로 리렌더링 될 것이다.

   *리덕스 액션: 이벤트 핸들링
    - 리덕스 스테이트에 상태(데이터)가 정의되어 있다.
    - 액션 크리에이터 함수를 통해 액션객체를 생성/리턴 한다.
    - 액션 객체는 모든 리듀서에게 흘러 들어간다. 액션 타입이 일치 할 경우 리듀서는 동작한다.
    - 구체적으로 리듀서에 스위치 조건문이 있어 액션의 타입에 따라 액션에 페이로드 데이터를 리턴한다.

   *리덕스 이벤트 핸들 전체 그림
    - 앱이 시작된다. 최상위 App에 따라 컴포넌트들이 렌더링 된다.
    - 컨테이너에는 리덕스 스테이트와 연결 하고 이벤트 핸들링에 필요한 액션을 디스페치와 연결한다.
    - 화면이 최초로 렌더링 된다.
    - 유저가 이벤트를 발생 시킨다. ex) click, onchange..
    - 이벤트에 의해 액션 생성자가 호출 된다.
    - 액션 생성자에 의해 액션 객체가 생성한다. 이 액션은 모든 리듀서(루트 리듀서)들 에게 흘러간다.(액션 디스패치)
    - 액션 타입에 맞는 리듀서가 있을 경우 액션의 페이로드를 리턴한다.
    - 페이로드(데이터)를 이용하여 화면이 재렌더링 된다.


